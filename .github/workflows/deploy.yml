on:
  push:
    branches: [main]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.current.outputs.version_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get current version from package.json
        id: current
        run: |
          # 현재 버전
          CURR_VERSION=$(jq -r .version package.json)

          # 이전 커밋의 package.json에서 버전 가져오기
          PREV_VERSION=$(git show HEAD^:package.json | jq -r .version)

          # 현재 버전과 이전 버전 중 가장 큰 버전을 저장
          LATEST_VERSION=$(
            printf '%s\n' "$PREV_VERSION" "$CURR_VERSION" \
            | sort -V \
            | tail -n1
          )

          # 가장 큰 버전이 이전 버전과 다르면 (즉 버전이 올라갔다면)
          if [ "$LATEST_VERSION" != "$PREV_VERSION" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi
  deploy:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: appleboy/ssh-action@v1.2.0
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ vars.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ vars.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_AUTH_REDIRECT_TO: ${{ vars.NEXT_PUBLIC_AUTH_REDIRECT_TO }}
          NEXT_PUBLIC_BASE_URL: ${{ vars.NEXT_PUBLIC_BASE_URL }}
          HF_EMBEDDING_MODEL_ID: ${{ vars.HF_EMBEDDING_MODEL_ID }}
          HF_RERANKER_MODEL_ID: ${{ vars.HF_RERANKER_MODEL_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LOGIN_PIN_NUMBER: ${{ secrets.LOGIN_PIN_NUMBER }}
          NEXT_PUBLIC_VALID_EMAIL_CONFIRMED_AT: ${{ vars.NEXT_PUBLIC_VALID_EMAIL_CONFIRMED_AT }}
          VALID_USER_CREATED_AT: ${{ secrets.VALID_USER_CREATED_AT }}
          ORACLE_OLLAMA_HOST: ${{ secrets.ORACLE_OLLAMA_HOST }}
          LLM_SECRET_KEY: ${{ secrets.LLM_SECRET_KEY }}
          GOOGLE_SEARCH_API_KEY: ${{ secrets.GOOGLE_SEARCH_API_KEY }}
          GOOGLE_SEARCH_CX: ${{ secrets.GOOGLE_SEARCH_CX }}
          GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}
        with:
          envs: NEXT_PUBLIC_SUPABASE_URL,NEXT_PUBLIC_SUPABASE_ANON_KEY,SUPABASE_SERVICE_ROLE_KEY,NEXT_PUBLIC_AUTH_REDIRECT_TO,NEXT_PUBLIC_BASE_URL,OPENAI_API_KEY,LOGIN_PIN_NUMBER,NEXT_PUBLIC_VALID_EMAIL_CONFIRMED_AT,VALID_USER_CREATED_AT,ORACLE_OLLAMA_HOST,LLM_SECRET_KEY,GOOGLE_SEARCH_API_KEY,GOOGLE_SEARCH_CX,GOOGLE_AI_API_KEY
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            trap 'echo "Deploy failed at line $LINENO"' ERR
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            REPO_DIR=~/${{ github.event.repository.name }}
            [ -d "$REPO_DIR/.git" ] || git clone --depth 1 https://github.com/${{ github.repository }}.git "$REPO_DIR"
            cd "$REPO_DIR"
            git fetch --prune --depth=1 origin main
            git reset --hard origin/main
            docker compose -f compose.prod.yaml build --pull
            docker compose -f compose.prod.yaml up -d --remove-orphans
